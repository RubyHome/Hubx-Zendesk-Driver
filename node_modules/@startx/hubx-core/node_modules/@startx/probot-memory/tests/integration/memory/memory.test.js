"use strict";
var LongTermMemory = require("../../../src/long-term-memory/long-term-memory");
var BusinessMapping = require("../../../src/business-mapping/business-mapping");
const memory_1 = require("../../../src/memory/memory");
const Should = require("should");
var memory = new memory_1.Memory();
describe("[integration] Memory", function () {
    this.timeout(10000);
    var accountId;
    it("should be able to call the createAccount function", function (done) {
        memory.createAccount("GMAIL", "test1@test.com", "oAuth", {
            accessToken: "test",
            refreshToken: "test2"
        }).then((response) => {
            Should(response).be.an.Object();
            accountId = response["account"].identifier;
            done();
        }).catch(done);
    });
    it("should be able to call the updateAccount function", function (done) {
        memory.updateAccount("test1@test.com", "GMAIL", {
            data: {
                accessToken: "test2",
                refreshToken: "test3"
            }
        }).then((response) => {
            Should(response).be.undefined();
            done();
        }).catch(done);
    });
    it('should be able to call mapNameEntities function', function (done) {
        memory.mapNameEntities("GMAIL", accountId, "GMAIL-EMAIL", [
            {
                mailId: "asdasd",
                test: 'ss22',
                subject: "s"
            }
        ]).then(() => {
            done();
        }).catch(done);
    });
    it("should be able to call the createUser function", function (done) {
        memory.createUser("test@test.com", [accountId], ["asdasd"]).then((user) => {
            Should(user).be.an.Object();
            done();
        }).catch(done);
    });
    it("should be able to call the findIntents function", function (done) {
        memory.findIntents("show").then((intents) => {
            Should(intents).be.an.Array();
            done();
        }).catch(done);
    });
    it("should be able to call the findEntities function", function (done) {
        memory.findEntities("emails").then((entities) => {
            Should(entities).be.an.Array();
            done();
        }).catch(done);
    });
    it("should be able to call the findNameEntities function", function (done) {
        memory.findNameEntities("ivc").then((nameEntities) => {
            console.info(nameEntities);
            Should(nameEntities).be.an.Array();
            done();
        }).catch(done);
    });
    it("should be able to call the findProperties function", function (done) {
        memory.findProperties("Incomplete").then((properties) => {
            Should(properties).be.an.Array();
            done();
        }).catch(done);
    });
    it("should be able to call the findStaticProperties function", function (done) {
        memory.findStaticProperties("created").then((properties) => {
            Should(properties).be.an.Array();
            done();
        }).catch(done);
    });
    it("should be able to call the findVirtualObjects", function (done) {
        memory.findVirtualObjects("new").then((virtualObjects) => {
            Should(virtualObjects).be.an.Array();
            done();
        }).catch(done);
    });
    it("should be able to call the findSkills", function (done) {
        memory.findSkills("pizza").then((skills) => {
            Should(skills).be.an.Array();
            done();
        }).catch(done);
    });
    it("should be able to call the findPersonalityTexts", function (done) {
        memory.findPersonalityTexts(["GREETING"], "INDIAN").then((texts) => {
            console.info(texts);
            Should(texts).be.an.Object();
            done();
        }).catch(done);
    });
    it("should be able to call the findNameEntitiesDifference", function (done) {
        memory.findNameEntitiesDifference("ZENDESK-TICKET", "guy@fastee.im", {
            "10": {
                asd: "asd",
                description: "bla bla bla",
                due_at: null
            },
            "11": {
                asdasd: true
            },
        }).then((diff) => {
            console.info(diff);
            Should(diff).be.an.Object();
            done();
        }).catch(done);
    });
});
