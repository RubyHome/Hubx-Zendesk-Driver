"use strict";
const Sequelize = require("sequelize");
var config = {
    logging: false,
};
if (process.env.INSTANCE_CONNECTION_NAME) {
    config["dialectOptions"] = {
        socketPath: `/cloudsql/${process.env.INSTANCE_CONNECTION_NAME}`
    };
}
exports.db = new Sequelize('mysql://root:Bonanza12@104.196.178.255:3306/main', config);
exports.entity = exports.db.define("entities", {
    collectionName: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    friendlyName: {
        type: Sequelize.STRING,
        allowNull: true,
    },
    accountType: {
        type: Sequelize.ENUM('ASANA', 'GMAIL', 'OTHER', 'ZENDESK'),
        allowNull: false,
    },
    applicationType: {
        type: Sequelize.ENUM('CRM', 'STORAGE', 'EMAIL', 'GLOBAL', 'HELPDESK'),
        allowNull: false,
    },
});
exports.intent = exports.db.define("intents", {
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    category: {
        type: Sequelize.ENUM('SOLE', 'PLURAL', 'YES_NO', 'VALUE', 'FORMULA', 'OTHER'),
        allowNull: false,
    },
    accountType: {
        type: Sequelize.ENUM('ASANA', 'GMAIL', 'OTHER', 'ZENDESK'),
        allowNull: false,
    },
    applicationType: {
        type: Sequelize.ENUM('CRM', 'STORAGE', 'EMAIL', 'GLOBAL', 'HELPDESK'),
        allowNull: false,
    },
});
exports.property = exports.db.define("properties", {
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    entityIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    category: {
        type: Sequelize.ENUM("ID", "MAIN", "URL", "OTHER"),
        defaultValue: "OTHER",
    },
    type: {
        type: Sequelize.ENUM('MONEY', 'DATE', 'NUMBER', 'OPEN_STRING', 'PERCENT', 'EMAIL', 'PHONE', 'ADDRESS', 'NAME', 'CONTACT', 'POINTER', 'RADIOBOX', 'IMAGE'),
        allowNull: false,
    },
    value: {
        type: Sequelize.TEXT,
        allowNull: true,
    },
    visible: {
        type: Sequelize.BOOLEAN,
        allowNull: false,
        defaultValue: 0
    },
    order: {
        type: Sequelize.INTEGER,
        allowNull: true,
        defaultValue: 0
    },
    friendlyName: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    collectionName: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.propertyValue = exports.db.define("properties_values", {
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    collectionName: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.skill = exports.db.define("skills", {
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    description: {
        type: Sequelize.TEXT,
        allowNull: false,
    },
    endpoint: {
        type: Sequelize.TEXT,
        allowNull: true,
    },
    mainEntity: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    mainIntent: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accountType: {
        type: Sequelize.ENUM('ASANA', 'GMAIL', 'OTHER', 'ZENDESK'),
        allowNull: false,
    },
    applicationType: {
        type: Sequelize.ENUM('CRM', 'STORAGE', 'EMAIL', 'GLOBAL', 'HELPDESK'),
        allowNull: false,
    },
});
exports.virtualObject = exports.db.define("virtualObjects", {
    type: {
        type: Sequelize.ENUM('PROPERTY', 'ENTITY'),
        allowNull: false,
    },
    condition: {
        type: Sequelize.TEXT,
        allowNull: true,
    },
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
});
exports.user = exports.db.define("users", {
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    entities: {
        type: Sequelize.JSON,
        allowNull: false,
    },
    accounts: {
        type: Sequelize.TEXT,
        allowNull: false,
    },
});
exports.account = exports.db.define("accounts", {
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    organizationIdentifier: {
        type: Sequelize.STRING,
        allowNull: true,
    },
    accountType: {
        type: Sequelize.ENUM('ASANA', 'GMAIL', 'OTHER', 'ZENDESK'),
        allowNull: false,
    },
    protocol: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    data: {
        type: Sequelize.JSON,
        allowNull: false,
    },
    applicationType: {
        type: Sequelize.ENUM('CRM', 'STORAGE', 'EMAIL', 'GLOBAL', 'HELPDESK'),
        allowNull: false,
    }
});
exports.entityBusinessType = exports.db.define("entities_businessTypes", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    businessType: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    entityIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.entityWord = exports.db.define("entities_words", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    word: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accuracy: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    entityIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.intentBusinessType = exports.db.define("intents_businessTypes", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    businessType: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    intentIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.intentWord = exports.db.define("intents_words", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    word: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accuracy: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    intentIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.propertyBusinessType = exports.db.define("properties_businessTypes", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    businessType: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    propertyIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.propertyWord = exports.db.define("properties_words", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    word: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accuracy: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    propertyIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.propertyValueWords = exports.db.define("properties_values_words", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    word: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accuracy: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    propertyValueIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.skillBusinessType = exports.db.define("skills_businessTypes", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    businessType: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    skillIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.skillWord = exports.db.define("skills_words", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    word: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accuracy: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    skillIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.virtualObjectBusinessType = exports.db.define("virtualObjects_businessTypes", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    businessType: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    virtualObjectIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.virtualObjectWord = exports.db.define("virtualObjects_words", {
    id: {
        type: Sequelize.INTEGER,
        allowNull: false,
        autoIncrement: true,
        primaryKey: true
    },
    word: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accuracy: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    virtualObjectIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.entity.hasMany(exports.entityBusinessType, {
    foreignKey: "entityIdentifier",
    as: "businessTypes",
});
exports.entity.hasMany(exports.entityWord, {
    foreignKey: "entityIdentifier",
    as: "words",
});
exports.entity.hasMany(exports.property, {
    foreignKey: "entityIdentifier",
    as: "properties"
});
exports.intent.hasMany(exports.intentBusinessType, {
    foreignKey: "intentIdentifier",
    as: "businessTypes",
});
exports.intent.hasMany(exports.intentWord, {
    foreignKey: "intentIdentifier",
    as: "words",
});
exports.property.hasMany(exports.propertyBusinessType, {
    foreignKey: "propertyIdentifier",
    as: "businessTypes",
});
exports.property.hasMany(exports.propertyWord, {
    foreignKey: "propertyIdentifier",
    as: "words",
});
exports.property.hasMany(exports.propertyValue, {
    foreignKey: "propertyIdentifier",
    as: "values",
});
exports.property.belongsTo(exports.entity, {
    foreignKey: "entityIdentifier",
});
exports.propertyValue.hasMany(exports.propertyValueWords, {
    foreignKey: "propertyValueIdentifier",
    as: "words",
});
exports.skill.hasMany(exports.skillBusinessType, {
    foreignKey: "skillIdentifier",
    as: "businessTypes",
});
exports.skill.hasMany(exports.skillWord, {
    foreignKey: "skillIdentifier",
    as: "words",
});
exports.virtualObject.hasMany(exports.virtualObjectBusinessType, {
    foreignKey: "virtualObjectIdentifier",
    as: "businessTypes",
});
exports.virtualObject.hasMany(exports.virtualObjectWord, {
    foreignKey: "virtualObjectIdentifier",
    as: "words",
});
