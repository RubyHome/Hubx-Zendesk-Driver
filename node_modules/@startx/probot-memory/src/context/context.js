"use strict";
const Sequelize = require("sequelize");
var config = {
    logging: false,
};
if (process.env.INSTANCE_CONNECTION_NAME) {
    config["dialectOptions"] = {
        socketPath: `/cloudsql/${process.env.INSTANCE_CONNECTION_NAME}`
    };
}
exports.db = new Sequelize('mysql://root:Bonanza12@104.196.178.255:3306/context', config);
exports.token = exports.db.define("tokens", {
    id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true,
        allowNull: false,
    },
    userId: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    botId: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    sentence: {
        type: Sequelize.TEXT,
        allowNull: false,
    },
    tokens: {
        type: Sequelize.JSON,
        allowNull: false,
    },
});
exports.proactivity = exports.db.define("proactivity", {
    id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true,
        allowNull: false,
    },
    userId: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    botId: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    reminderText: {
        type: Sequelize.TEXT,
        allowNull: false,
    },
    reminderTokens: {
        type: Sequelize.JSON,
        allowNull: true,
    },
    reminderDate: {
        type: Sequelize.DATE,
        allowNull: true,
    },
    reminderRecurring: {
        type: Sequelize.TEXT,
        allowNull: true,
    },
    processed: {
        type: Sequelize.BOOLEAN,
        allowNull: true,
    }
});
exports.probot = exports.db.define("probots", {
    botId: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
    },
    endpoint: {
        type: Sequelize.TEXT,
        allowNull: false,
    },
});
exports.nerveToken = exports.db.define("nerve_tokens", {
    id: {
        type: Sequelize.INTEGER,
        autoIncrement: true,
        primaryKey: true,
        allowNull: false,
    },
    entityIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    primaryKey: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accountIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    accountType: {
        type: Sequelize.ENUM('ASANA', 'GMAIL', 'OTHER', 'ZENDESK'),
        allowNull: false,
    },
    eventType: {
        type: Sequelize.ENUM('ENTITY_CREATED', 'ENTITY_UPDATED', 'ENTITY_DELETED', 'ACCOUNT_CREATED', 'ACCOUNT_UPDATED', 'ACCOUNT_DELETED'),
        allowNull: false,
    },
    changedProperties: {
        type: Sequelize.JSON,
        allowNull: false,
    },
});
exports.personality = exports.db.define("personalities", {
    identifier: {
        type: Sequelize.STRING,
        primaryKey: true,
        allowNull: false,
        unique: true,
    },
    defaultMood: {
        type: Sequelize.ENUM('HAPPY', 'FUNNY', 'SAD', 'UPSET', 'SERIOUS'),
        allowNull: false,
    },
    description: {
        type: Sequelize.STRING,
        allowNull: false,
    },
});
exports.personalityText = exports.db.define("personalities_texts", {
    variableName: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    personalityIdentifier: {
        type: Sequelize.STRING,
        allowNull: false,
    },
    mood: {
        type: Sequelize.ENUM('HAPPY', 'FUNNY', 'SAD', 'UPSET', 'SERIOUS'),
        allowNull: false,
    },
    probability: {
        type: Sequelize.INTEGER,
        allowNull: false,
    },
    text: {
        type: Sequelize.TEXT,
        allowNull: false,
    },
});
exports.personality.hasMany(exports.personalityText, {
    foreignKey: "personalityIdentifier",
    as: "texts",
});
